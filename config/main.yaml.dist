###########################
#         Janitor         #
#-------------------------#
#           Main          #
###########################

# App Info
app:
  # Server and Client configuration
  service:
    # Configuration for the Server side
    listen:
      # [String] IP to listen to.
      #   Set 127.0.0.1 to only listen to localhost, which is the most secure
      #   Set 0.0.0.0 to have the server available externally as well
      host: 0.0.0.0
      # [String] Port to listen to.
      port: 5000
      # [Bool] If the listener server will run in debug mode (more and explicit logging)
      #   defaults to false.
      debug: false
    # [String] URL (and maybe port) to send the POST request to.
    remote_url: http://localhost:5000
  # Control of the app runners
  run_control:
    # [Bool] Performs a dry run: the queue is untouched and no re-toot is really done
    # Check the logs/stdout to see the results
    dry_run: True

# Logging config
logger:
  # [Integer] Log level: NOTSET=0 | DEBUG=10 | INFO=20 | WARN=30 | ERROR=40 | CRITICAL=50
  loglevel: 10
  # [String] Name of the logger
  name: "janitor"
  # [String] Format of the log
  format: "[%(asctime)s] %(levelname)-8s %(name)-12s %(message)s"
  # File related parameters
  file:
    # [Bool] Dump the log into a file
    active: True
    # [String] Path and filename of the log file
    filename: "log/janitor.log"
    # [String] The encoding of the log file
    encoding: "UTF-8"
    # [Bool] Do we want to rotate the log files? Only will apply if we log to files
    rotate:
        active: True
        # [String] When do we rotate. Accepts "S" | "M" | "H" | "D" | "W0"-"W6" | "midnight"
        #   See https://docs.python.org/3/library/logging.handlers.html#timedrotatingfilehandler
        when: "midnight"
        # [Int] How many rotated old files to keep before it starts to delete the older
        backup_count: 10
        # [Bool] Stick to UTC timings when triggering the rotation
        utc: True
        # [String] in format "%H:%M:%S". When to trigger THE VERY FIRST rotation.
        #   Subsequent will attend to when_rotate
        at_time: "1:00:00"
  # Standard output related parameters
  stdout:
  # [Bool] Dump the log into a stdout
      active: False

# Storage for the toots queue registry
queue_storage:
  # [String] Where to store it
  file: "storage/queue.yaml"

publisher:
  # [String] Where to download the media to
  media_storage: "storage/media/"
  # [Bool] Publish only the older post
  # Useful if we have this bot executed often, so publishes a single post in every run
  only_oldest_post_every_iteration: True

formatter:
  # [Bool] Merge summary into the main body of the message
  #   This is useful for Mastodon APIs like Firefish that do not support "summary"
  #   It will look at the parameter merge_summary_into_text_strategy to know how
  merge_summary_into_text: True
  # Templates used, classified per area
  templates:
    # Strategies for merging extra values into the current templates
    merge_strategies:
      # [String] Strategy to merge both summary and text into text.
      summary_into_text: "$summary\n\n$text"
      # [String] Strategy to merge the DM mention into the text when needed
      mention_into_text: "$text\n\nü§´ Only for your eyes, $mention"
    # Templates depending on the Message Type
    message_type:
      # For the message_type NONE
      none:
        # [String] Summary line.
        summary: "$summary"
        # [String] Text line.
        text: "$text"
      # For the message_type INFO
      info:
        # [String] Summary line.
        summary: "‚ÑπÔ∏è $summary"
        # [String] Text line.
        text: "$text"
      # For the message_type WARNING
      warning:
        # [String] Summary line.
        summary: "‚ö†Ô∏è $summary"
        # [String] Text line.
        text: "$text"
      # For the message_type ERROR
      error:
        # [String] Summary line.
        summary: "üî• $summary"
        # [String] Text line.
        text: "$text"
      # For the message_type ALARM
      error:
        # [String] Summary line.
        summary: "üö® $summary"
        # [String] Text line.
        text: "$text"