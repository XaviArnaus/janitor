#!/usr/bin/env bash
PYTHON=python3
POETRY_PATH=$(which poetry)

if [ $1 = "help" ]; then
    # Just redirect the possible command "help" to the already existing -h
    $POETRY_PATH run main -h
elif [ $1 = "test_message" ]; then
    # Implemented here to demonstrate a curl call from the system to the listener.
    curl -X POST -d "hostname=MyHostname&message=This+is+a+test+message" http://localhost:5000/message
elif [ $1 = "listener" ]; then
    if [ $2 = "start" ]; then
        # We want to spawn a listener without too much noise, and logging directly.
        LISTENER=$(pgrep -f "listen");
        if [ ! -z "$LISTENER" ]
        then
            echo "Listener already running with PID: $LISTENER. Stop."
        else
            nohup $POETRY_PATH run main $@ > log/listen_in_background.log 2>&1 &
            ./$0 listener status
        fi
    elif [ $2 = "status" ]; then
        # Are we already listening?
        LISTENER=$(pgrep -f "listen");
        if [ -z "$LISTENER" ]
        then
            echo "Listener is NOT running"
        else
            echo "Listener is running with the PID: $LISTENER"
        fi
    elif [ $2 = "stop" ]; then
        LISTENER=$(pgrep -f "listen");
        if [ ! -z "$LISTENER" ]
        then
            echo "Stopping listener under PID: $LISTENER"
            sudo kill -9 $LISTENER
        fi
        ./$0 listener status
    fi
elif [ $1 = "validate_config" ]; then
    # Yeah, this could be implemented directly inside the python, taking the expected config.
    $PYTHON -c 'import yaml;yaml.safe_load(open("config.yaml"))' > /dev/null && echo -e "\033[0;32mThe Config is correct\033[0m" || echo -e "\033[0;31mThe Config has an error\033[0m"
else
    # For the rest, just forward to the proper python script
    $POETRY_PATH run main $@
fi